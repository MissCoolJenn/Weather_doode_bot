#*********************************************************************************************************************************************************************************************************************************
# API_TOKEN
import logging
from aiogram import Bot, Dispatcher
from keys import API_TOKEN

# –ü–∏—à–µ–ª –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher()
    


#*********************************************************************************************************************************************************************************************************************************
# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
from aiogram import types
from random import randint
import emoji

from aiogram.types import ReplyKeyboardRemove

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ /start
async def send_welcome(message: types.Message):
    # –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ 
    await insert_user_into_table(message.from_user.first_name)

    # –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
    await set_commands(bot)

    # –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer('Hi my dear human friend ^_^', reply_markup=await keyboard_get_weather()) 

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ /my_locations
async def show_my_loc(message: types.Message):
    # –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    names = await get_locations_from_table(message.from_user.first_name)
        # –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≥–¥–µ: 
        # [{'user_name': 'Miss Jenn', 'location_name': 'Home', 'latitude': 12.132123, 'longitude': 12.132123}, {'user_name': 'Miss Jenn', 'location_name': "–ö–∞–º'—è–Ω—Å—å–∫–µ", 'latitude': 12.132123, 'longitude': 12.132123}]

    await message.answer('._.', reply_markup=await menu_my_locations())#I added new keyboard

    keyboard_markup = await build_loc_inline_butt(names)
    await message.answer(f'Your locations:', reply_markup=keyboard_markup)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def echo(message: types.Message):
    ans = randint(0, 5)
    ans_list = ['ü§¶üèª‚Äç‚ôÄÔ∏è', 'ü§¶üèº‚Äç‚ôÄÔ∏è', 'ü§¶üèΩ‚Äç‚ôÄÔ∏è', 'ü§∑üèª‚Äç‚ôÄÔ∏è', 'ü§∑üèº‚Äç‚ôÄÔ∏è', 'ü§∑üèΩ‚Äç‚ôÄÔ∏è']
    await message.answer(ans_list[ans])



#*********************************************************************************************************************************************************************************************************************************
# –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
# ... –ø–æ–≥–æ–¥–∞ 'Weather now'
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

class StepsForm_one(StatesGroup):
    get_loc = State()

async def reply_for_now(message: types.Message, state: FSMContext):
    await message.reply('Ok, just send my your location', reply_markup=await keyboard_send_location())

    # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ get_loc (—Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)
    await state.set_state(StepsForm_one.get_loc)

async def return_weather_now(message: types.Message):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–µ—Ç—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –≤—ã–∑–æ–≤ —Ñ—É–Ω—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API, –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–±–∏—Ä–∞–Ω–∏–µ –∏—Ö –≤ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    await message.reply(get_weather_data.now(latitude, longitude), reply_markup=await keyboard_get_weather())


# ... –ø–æ–≥–æ–¥–∞ 'Weather for five days'
class StepsForm_two(StatesGroup):
    get_loc = State()

async def reply_for_five_days(message: types.Message, state: FSMContext):
    await message.reply('Ok, just send my your location', reply_markup=await keyboard_send_location())

    await state.set_state(StepsForm_two.get_loc)

async def return_for_five_days(message: types.Message):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–µ—Ç—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –≤—ã–∑–æ–≤ —Ñ—É–Ω—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API, –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–±–∏—Ä–∞–Ω–∏–µ –∏—Ö –≤ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    await message.reply(get_weather_data.five_days_every_three_hours(latitude, longitude), reply_markup=await keyboard_get_weather())


# –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Add new location
class StepsForm_three(StatesGroup):
    get_loc = State()
    get_loc_name = State()

async def reply_save_location(message: types.Message, state: FSMContext):
    #
    await message.reply(f'Ok, send me a location through the button \nor through üìé-> Location', reply_markup=await keyboard_send_location())#, one_time_keyboard=True

    await state.set_state(StepsForm_three.get_loc)

async def reply_get_loc_name(message: types.Message, state: FSMContext):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ 3/4 –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–∫–∞—Ü–∏–µ–π
    await state.update_data(
        user_name=message.from_user.first_name, 
        latitude=message.location.latitude,
        longitude=message.location.longitude
    )

    await message.reply('Now write the name of the location')

    await state.set_state(StepsForm_three.get_loc_name)

async def save_loc_in_db(message: types.Message, state: FSMContext):
    loc_name = message.text

    data = await state.get_data()
    user_name = data.get("user_name") 
    latitude = data.get("latitude")
    longitude = data.get("longitude")

    await insert_location_into_table(user_name, loc_name, latitude, longitude)

    await message.reply(f"I've saved this location, now it can be used conveniently üó∫! \n{user_name}\n{latitude}\n{longitude}\n{loc_name}")
    await show_my_loc(message)


# —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –±–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ Deleted one of the locations



#*********************************************************************************************************************************************************************************************************************************
# –ö–Ω–æ–ø–∫–∏ 
# ... –Ω–∞ –º–µ—Å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
async def keyboard_get_weather():
    kb = ReplyKeyboardBuilder()

    kb.button(text='Weather now')
    kb.button(text='Weather for five days')
    # –Ω–∞—Ö—É–π –≤—ã—Ä–µ–∑–∞–Ω –ø–æ–∫–∞ –±–¥ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ kb.button(text='My locations')

    kb.adjust(2, 1)

    return kb.as_markup(resize_keyboard=True)#, one_time_keyboard=True

async def keyboard_send_location():
    kb = ReplyKeyboardBuilder()

    kb.button(text='Send location', request_location=True)

    return kb.as_markup(resize_keyboard=True)#, one_time_keyboard=True

async def menu_my_locations(): # –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    kb = ReplyKeyboardBuilder()

    kb.button(text='Add new location')
    kb.button(text='Main menu')

    kb.adjust(2)

    return kb.as_markup(resize_keyboard = True)#, one_time_keyboard=True

# ... –º–µ–Ω—é
from aiogram import Bot
from aiogram.types import BotCommand

async def set_commands(bot: Bot):
    commands = [
    BotCommand(command="start", description="Main menu"),
    ]

    await bot.set_my_commands(commands)

# ... –∏–Ω–ª–∞–π–Ω
from aiogram.filters.callback_data import CallbackData
class LocInline(CallbackData, prefix='loc_name'): #
    user_name: str
    loc_name: str
    lat: float
    lon: float

from aiogram.utils.keyboard import InlineKeyboardBuilder
async def build_loc_inline_butt(loc_list): # –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    keyboard_builder = InlineKeyboardBuilder()

    # —á–µ—Ä–µ–∑ —Ü–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫ 
    for i in loc_list:
        keyboard_builder.button(text=f'{i["location_name"]}', callback_data=LocInline(user_name=i['user_name'], loc_name=i['location_name'], lat=i['latitude'], lon=i['longitude']))
    #                             ^ –∏–º—è –∫–Ω–æ–ø–∫–∏                  ^ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç –∫–Ω–æ–ø–∫–∞

    return keyboard_builder.as_markup()
    #                         ^ –≤–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

from aiogram.types import CallbackQuery
async def reply_loc_inline_butt(call: CallbackQuery, callback_data: LocInline): # –∏–Ω–ª–∞–π–Ω –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–µ—Ç–∞–ª—å–Ω–æ
    user_name = callback_data.user_name
    loc_name = callback_data.loc_name
    lat = callback_data.lat
    lon = callback_data.lon

    # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–æ–≤—Å–∫–æ–π –≥–µ–æ–ª–æ–∫–æ—Ü–∏–∏ 
    location = types.Location(latitude=lat, longitude=lon)

    # 1 —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    buttons_1 = [
        types.InlineKeyboardButton(text="Weather Now", callback_data=f"wn|{lat}|{lon}"),
        types.InlineKeyboardButton(text="For 5d every 3h", callback_data=f"w5|{lat}|{lon}"),
        #                                                       ^ callback_data - –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ç–∞–∫ —á—Ç–æ –≤ f —Å—Ç—Ä–æ–∫—É —è –¥–æ–±–∞–≤–ª—è—é —á–µ—Ä–µ–∑ | –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ —Ö–æ—á—É –ø–µ—Ä–µ–¥–∞—Ç—å
        #                                                       ^ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å —Å–∞–º–∏–º —Å–æ–±—ã—Ç–∏–µ–º —Ö—Ä–∞–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ callback_data
    ]
    # 2 —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    buttons_2 = [
        types.InlineKeyboardButton(text='Delete location', callback_data=f'dl_1|{user_name}|{loc_name}')
    ]
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons_1, buttons_2])

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–æ–≤—Å–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_location(chat_id=call.message.chat.id, latitude=location.latitude, longitude=location.longitude)
    await call.message.answer(f'Location name: {loc_name}', reply_markup=keyboard)

    #await call.message.answer(f'hi {user_name}, your loc: {loc_name}')
    await call.answer()

async def delete_location_1(call: CallbackQuery): # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω
    # –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ callback_data
    q = call.data.split('|')
    # ['dl_1', '12.123445', '12.123445']

    buttons = [
        types.InlineKeyboardButton(text='Yes', callback_data=f'dl_2|{q[1]}|{q[2]}'),
        types.InlineKeyboardButton(text='No', callback_data=f'dl_no')
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])

    await call.message.answer('Want to delete the location, sure?', reply_markup=keyboard)

    await call.answer()

async def delete_location_2(call: CallbackQuery): # —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –±–¥ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω
    # –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ callback_data
    q = call.data.split('|')
    # ['dl_2', '12.123445', '12.123445']
    
    await delete_location_from_table(q[1], q[2])

    await send_welcome(call.message)

    await call.answer()

async def no_delete_location(call: CallbackQuery): # –ø–µ—Ä–µ–¥—É–º–∞–ª —É–¥–∞–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é
    await send_welcome(call.message)

    await call.answer()

async def get_weather_from_inl(call: types.CallbackQuery): # –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    # –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ callback_data
    q = call.data.split('|')
    # ['wn', '12.123445', '12.123445']

    if q[0] == 'wn':
        await call.message.reply(get_weather_data.now(q[1], q[2]))
    elif q[0] == 'w5':
        await call.message.reply(get_weather_data.five_days_every_three_hours(q[1], q[2]), reply_markup=await keyboard_get_weather())

    await call.answer()



#*********************************************************************************************************************************************************************************************************************************
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
import requests
from keys import appid

class get_weather_data:
    def now(lat, lon):
        responce = requests.get(f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={appid}')

        data_raw = re.sub(r'"*;*"*', "", responce.text) 
        data = re.sub(',', '/', data_raw)

        # –≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return compile_message_form_data.weather_now(data)
    
    def five_days_every_three_hours(lat, lon):
        responce = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={appid}')

        data_raw = re.sub(r'"*;*"*', "", responce.text) 
        data = re.sub(',', '/', data_raw)

        # –≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return compile_message_form_data.weather_for_five_days(data)



#*********************************************************************************************************************************************************************************************************************************
# –ü—Ä–∏–∫–æ–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ postgreSQL
import asyncio
import asyncpg

# –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
async def insert_user_into_table(user_name):
    # –ø–æ–¥—Å–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    from keys import DATA_BASE
    conn = await asyncpg.connect(DATA_BASE)

    try:
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å *–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* –≤ —Å—Ç–æ–ª–±–µ—Ü "user_name" (–µ—Å–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ "user_name" –Ω–µ—Ç *–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* )
        await conn.execute('INSERT INTO users(user_name) SELECT ($1) WHERE NOT EXISTS (SELECT user_name FROM users WHERE user_name = $1);', f'{user_name}')
        
    except asyncpg.UndefinedTableError:
        # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞(—Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –≥–¥–µ –∫–æ–ª–æ–Ω–∫–∏: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π pk, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute('CREATE TABLE users(id serial PRIMARY KEY, user_name text)')
        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑ def (—Ç–∏–ø–∞ —Ä–µ–∫—É—Ä—Å–∏—è) 
        await insert_user_into_table(user_name)

    # –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –æ—Ç –±–¥
    await conn.close()

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥ (–≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π(–∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å - —Å—Ç—Ä–æ–∫–∞))
async def get_locations_from_table(user_name):
    # –ø–æ–¥—Å–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    from keys import DATA_BASE
    conn = await asyncpg.connect(DATA_BASE)

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –±–¥
    locations = await conn.fetch('SELECT * FROM favorite_locations WHERE user_name = $1', user_name)

    # –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –æ—Ç –±–¥
    await conn.close()

    # –ø—Ä–∏–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ë–î –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    locations_dicts = []
    for i in locations:
        s = dict(i)
        locations_dicts.append(s)

    return locations_dicts

# –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
async def insert_location_into_table(user_name, loc_name, lat, lon):
    # –ø–æ–¥—Å–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    from keys import DATA_BASE
    conn = await asyncpg.connect(DATA_BASE)

    try:
        # –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–∏–º—É—é –ª–æ–∫–∞—Ü–∏—é –≤ –±–¥, –≥–¥–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è pk –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∏–±–ª–∏—Ü—ã users, –∏–º—è –ª–æ–∫–∞—Ü–∏–∏, –¥–æ–ª–≥–æ—Ç–∞ –∏ —à–∏—Ä–æ—Ç–∞
        await conn.execute('INSERT INTO favorite_locations(user_name, location_name, latitude, longitude) VALUES($1, $2, $3, $4)', user_name, loc_name, lat, lon)

    except asyncpg.UndefinedTableError:
        # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞(—Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
        await conn.execute('CREATE TABLE favorite_locations(user_name text, location_name text, latitude float, longitude float)')
        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑ def (—Ç–∏–ø–∞ —Ä–µ–∫—É—Ä—Å–∏—è) 
        await insert_location_into_table(user_name, loc_name, lat, lon)

    # –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –æ—Ç –±–¥
    await conn.close()

# –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
async def delete_location_from_table(user_name, loc_name):
    # –ø–æ–¥—Å–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    from keys import DATA_BASE
    conn = await asyncpg.connect(DATA_BASE)

    # —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –±–¥
    await conn.execute('DELETE FROM favorite_locations WHERE user_name = $1 AND location_name = $2', user_name, loc_name)
    
    # –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –æ—Ç –±–¥
    await conn.close()



#*********************************************************************************************************************************************************************************************************************************
# –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞—é—â–∞—è —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
import re

class compile_message_form_data:
    # (–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å)
    def weather_now(data):
        city_name = Search_in_data.find_city_name(data)    
        country_name = Search_in_data.find_country_name(data)
        weather_now = Search_in_data.find_weather_now(data)
        weather_emoji = Emoji_for_variable.choose_weather_emoji(weather_now)
        weather_description = Search_in_data.find_weather_description(data)
        description_emoji = Emoji_for_variable.choose_weather_description_emoji(weather_description)
        clouds_per = Search_in_data.find_clouds(data)
        clouds_or_rain = Clouds_or_rain.big_question(data, weather_description, clouds_per)
        temp_feels = Search_in_data.find_temp(data)
        humidity = Search_in_data.find_humidyty(data)
        wind_speed = Search_in_data.find_wind_speed(data)
        deg = Search_in_data.find_wind_degree(data)
        deg_word = Degree_to_side_of_the_world.wind(deg)
        sunrise = Search_in_data.find_sunrise(data)
        sunset = Search_in_data.find_sunset(data)
        visibility = Search_in_data.find_visibility(data)

        return f'üìçLocation: {city_name} {country_name}\n\nWeather now: {weather_now}{weather_emoji}\nDescription: {weather_description}{description_emoji}{clouds_or_rain}\n\nTemperature: {temp_feels}¬∞\nHumidity: {humidity}%\n\nWind:  {wind_speed}m/s\nAngel: {deg_word}\n\nSunrise: üåù {sunrise}\nSunset:  üåö {sunset}\n\nVisibility: {visibility}m'

    # (–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π —Å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)
    def weather_for_five_days(data_for_five_days):
        from datetime import timedelta
        class data_class:
            def __init__(self, time_emoji, time, temp, weather, weather_emoji, weather_description, humidity, wind, rain_volume):
                self.time_emoji = time_emoji
                self.time = time
                self.temp = temp
                self.weather = weather
                self.weather_emoji = weather_emoji
                self.weather_description = weather_description
                self.humidity = humidity
                self.wind = wind
                self.rain_volume = rain_volume

        # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data_objects = []

        # –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ (–∫ –ø—Ä–∏–º–µ—Ä—É –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ 06:00 05.08.2023)
        time_matches = re.findall(r'\d\d:00:00.{275,350}\d\d\d\d-\d\d-\d\d', data_for_five_days)

        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        location = Search_in_data.find_city_name(data_for_five_days)
        country_name = Search_in_data.find_country_name(data_for_five_days)
        sunrise = Search_in_data.find_sunrise(data_for_five_days)
        sunset = Search_in_data.find_sunset(data_for_five_days)
        date_begin = Search_in_data.find_date(data_for_five_days)

        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞
        for data_three_hour in time_matches:
            time = re.search(r'\d\d', data_three_hour).group()
            time_emoji = Emoji_for_variable.choose_time_emoji(time, sunrise, sunset)
            temp = Search_in_data.find_temp(data_three_hour)
            weather = Search_in_data.find_weather_now(data_three_hour)
            waether_description = Search_in_data.find_weather_description(data_three_hour)
            weather_emoji = Emoji_for_variable.choose_weather_emoji(weather)
            wind_speed = Search_in_data.find_wind_speed(data_three_hour)
            humidity = Search_in_data.find_humidyty(data_three_hour)
            if weather == 'Rain':
                rain_volume = Search_in_data.find_rain_volume(data_three_hour)
            elif weather == 'Snow':
                rain_volume = Search_in_data.find_snow_volume(data_three_hour)
            else:
                rain_volume = ''

            obj = data_class(time_emoji, time, temp, weather, weather_emoji, waether_description, humidity, wind_speed, rain_volume)
            data_objects.append(obj)            
        
        # —Ö—É–π–Ω—è —á—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–≥–æ–¥–æ–π –Ω–∞ –æ—Ç—Ä–µ–∑–æ–∫ –≤ 3 —á–∞—Å–∞# func_str = lambda i: f'{i.time_emoji}{i.time} - {i.temp}¬∞ ({i.weather}{i.weather_emoji}) Wind {i.wind}m/s'
        func_str = lambda i: f'{i.time_emoji}{i.time}:00    {i.temp}¬∞ ({i.weather_emoji}) {i.humidity}% {i.wind}m/s    {i.rain_volume}'
        
        # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—è —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞
        def for_for_it(data):
            day = ''
            for i in data:
                # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —á—Ç–æ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ 00 —á–∞—Å - –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å
                day = day + f'\n{func_str(i)}'
            return day

        # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–ª—é—Ö–∏ (—Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –∏ –æ—Ç–¥–∞–µ—Ç –∏—Ö –ø–æ—Ä—Ü–∏–æ–Ω–Ω–æ)
        def day_gen(waether_data):
            mini_data = []
            for i in waether_data:
                mini_data.append(i)
                if int(i.time) == 21:
                    yield for_for_it(mini_data) 
                    mini_data = []
        create_day = day_gen(data_objects)

        # —Ö—É–π–Ω—é—à–∫–∞ –¥–ª—è –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –∫ –¥–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        plus_days = lambda x: date_begin + timedelta(days=x)

        # –ø–µ—Ä–µ–º–æ–≥–∞
        mr_return = f'üìç{location} {country_name}\n\nToday:{next(create_day)}\n\nTomorrow:{next(create_day)}\n\n{plus_days(2).strftime("%d.%m")}:{next(create_day)}\n\n{plus_days(3).strftime("%d.%m")}:{next(create_day)}'
        
        # —Ñ–∏–∫—Å –±–∞–≥–∞ —Å —Ç–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ –Ω–∞ 4 –¥–Ω—è (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ 00:__ –≤—Ä–µ–º–µ–Ω–∏)
        try:
            # –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–∏—Ç—å 5–π –¥–µ–Ω—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ç–æ –±—É–¥–µ—Ç –≤—Å–µ–≥–æ 4 –¥–Ω—è
            mr_return += f'\n\n{plus_days(4).strftime("%d.%m")}:{next(create_day)}'
        except:
            pass

        return mr_return
    


#*********************************************************************************************************************************************************************************************************************************
# –ö–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

# (–ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ)
class Search_in_data:
    def find_city_name(weather_data):
        try:
            city_match = re.search(r'name:\w+-*\w*/' , weather_data)
            city_name = city_match.group().split(':')[1][:-1]
        except AttributeError:
            city_name = 'No city'

        return city_name
    
    def find_country_name(weather_data):
        try:
            country_macth = re.search(r'country:.{2}/', weather_data)
            country_name = country_macth.group().split(':')[1][:-1]
        except AttributeError:
            country_name = '...'

        return country_name
    
    def find_weather_now(weather_data):
        weather_now_macth = re.search(r'main:\w+/', weather_data)
        weather_now = weather_now_macth.group().split(':')[1][:-1]

        return weather_now
    
    def find_weather_description(weather_data):
        weather_description_macth = re.search(r'description:.+/', weather_data)
        weather_description = weather_description_macth.group().split(':')[1][:-5]
        weather_description = weather_description.capitalize()

        return weather_description
    
    def find_temp(weather_data):
        temp_feels_mathc = re.search(r'temp:\d+', weather_data)
        temp_feels_str = temp_feels_mathc.group().split(':')[1]
        temp_feels = int(temp_feels_str) - 273

        return temp_feels
     
    def find_sunrise(weather_data):
        from datetime import datetime

        sunrise_timestump_mathc = re.search(r'sunrise:\d{10}', weather_data)
        sunrise_timestump_str = sunrise_timestump_mathc.group().split(':')[1]
        sunrise_timestump = int(sunrise_timestump_str)
        sunrise_time = datetime.fromtimestamp(sunrise_timestump)
        sunrise = sunrise_time.strftime('%H:%M')

        return sunrise

    def find_sunset(weather_data):
        from datetime import datetime

        sunset_timestump_macth = re.search(r'sunset:\d{10}', weather_data)
        sunset_timestump_str = sunset_timestump_macth.group().split(':')[1]
        sunset_time = int(sunset_timestump_str)
        sunset_time = datetime.fromtimestamp(sunset_time)
        sunset = sunset_time.strftime('%H:%M')

        return sunset
    
    def find_visibility(weather_data):
        visibility_macth = re.search(r'visibility:.+/', weather_data)
        visibility_macth_second = re.search(r'\d+', visibility_macth.group())
        visibility = visibility_macth_second.group()

        return visibility
    
    def find_humidyty(weather_data):
        humidity_match = re.search(r'humidity:.+/', weather_data)
        humidity_match_second = re.search(r'\d+', humidity_match.group())
        humidyty = humidity_match_second.group()

        return humidyty
    
    def find_wind_speed(weather_data):
        wind_speed_mathc = re.search(r'speed:.*/', weather_data)
        wind_speed_mathc_second = re.search(r'\d\.*\d*', wind_speed_mathc.group())
        wind_speed = wind_speed_mathc_second.group()

        return wind_speed
    
    def find_wind_degree(weather_data):
        deg_mathc = re.search(r'deg:.*/', weather_data)
        deg_mathc_second = re.search(r'\d+', deg_mathc.group())
        deg = int(deg_mathc_second.group())

        return deg
    
    def find_clouds(weather_data):
        clouds_per_macth = re.search(r'all:.+', weather_data)
        clouds_per_macth_second = re.search(r'\d+', clouds_per_macth.group())
        clouds_per = clouds_per_macth_second.group()

        return clouds_per
    
    def find_date(weather_data):
        from datetime import datetime

        date_raw = re.search(r'^.{325,375}\d\d-\d\d', weather_data)
        date = date_raw.group().split(':')
        date = datetime.strptime(date[-1], '%Y-%m-%d')

        return date
    
    def find_rain_volume(weather_data):
        try:
            rain_volume_match = re.search(r'rain:....\d.\d\d', weather_data)
            rain_volume = rain_volume_match.group().split(':')[-1]
            rain = f'({rain_volume}mm)'   
        except:
            rain = ''

        return rain
    
    def find_snow_volume(weather_data):
        try:
            snow_volume_match = re.search(r'snow:....\d.\d\d', weather_data)
            snow_volume = snow_volume_match.group().split(':')[-1]
            snow = f'({snow_volume}mm)'   
        except:
            snow = ''

        return snow
       
# (–ø–æ–¥–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ —ç–º–æ–¥–∂–∏)
class Emoji_for_variable:
    def choose_weather_description_emoji(weather_description):
        if weather_description == 'Overcast clouds':
            description_emoji = '‚òÅ'
        elif re.search(r'clouds', weather_description):
            description_emoji = 'üå§'
        elif re.search(r'rain', weather_description):
            description_emoji = 'üåß'
        else:
            description_emoji = '‚òÄ'

        return description_emoji

    def choose_weather_emoji(weather_now):
        if weather_now == 'Clouds':
            weather_emoji = '‚òÅ'
        elif weather_now == 'Clear':
            weather_emoji = '‚òÄ'
        elif weather_now == 'Rain':
            weather_emoji = '‚òîÔ∏è'
        elif weather_now == 'Snow':
            weather_emoji = '‚ùÑÔ∏è' #'üå®'
        else:
            weather_emoji = weather_now

        return weather_emoji

    def choose_time_emoji(time, sunrise_str, sunset_str):
        from datetime import datetime, timedelta

        time = datetime.strptime(time, "%H")
        sunrise = datetime.strptime(sunrise_str, "%H:%M")
        sunset = datetime.strptime(sunset_str, "%H:%M")

        if time < sunrise:
            return 'üåÉ'
        elif time > sunrise and time < sunrise + timedelta(hours=2):
            return 'üåÖ'
        elif time > sunrise + timedelta(hours=2) and time < sunset:
            return 'üèô'
        elif time > sunset and time < sunset + timedelta(hours=2):
            return 'üåá'
        elif time > sunset + timedelta(hours=2):
            return 'üåÉ'
        else:
            return 'üåÅ'
    
# (–ø–æ–¥–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã —Å–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª–∞ –≤–µ—Ç—Ä–∞)
class Degree_to_side_of_the_world:
    def wind(deg):
        if deg < 23 or deg > 338:
            deg_word = 'North'
        elif deg >= 23 or deg <= 68:
            deg_word = "North - East"
        elif deg > 68 or deg < 113:
            deg_word = "East"
        elif deg >= 113 or deg <= 158:
            deg_word = "South - East"
        elif deg > 158 or deg < 263:    
            deg_word = "South"
        elif deg >= 203 or deg <= 245:
            deg_word = "South - West"
        elif deg > 148 or deg < 293:
            deg_word = "West"
        elif deg >= 293 or deg <= 338:
            deg_word = "South - East"
        else:
            deg_word = 'ssd'

        return deg_word

# (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–¥–µ—Ç –¥–æ–∂–¥—å(–≤–æ–∑–≤—Ä–∞—Ç >0mm –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å–∞–¥–∫–æ–≤) –∏–ª–∏ –Ω–µ—Ç(–≤–æ–∑–≤—Ä–∞—Ç 0%-100% –æ–±–ª–∞–∫–æ–≤ –≤ –Ω–µ–±–µ) )
class Clouds_or_rain:
    def big_question(weather_data, weather_description, clouds_per):
        try:
            rain_v_match = re.search(r'rain:{[^}]+}', weather_data)
            rain_v_match_second = rain_v_match.group().split(':')[-1]
            rain_v = rain_v_match_second.split('}')[0]
        except:
            rain_v = None

        if re.search(r'rain', weather_description):
            clouds_or_rain = f'\nRain volume: {rain_v}mm'
        else:
            clouds_or_rain = f'\nClouds: {clouds_per}%'

        return clouds_or_rain



#*********************************************************************************************************************************************************************************************************************************
# –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
from aiogram import F

async def Main():
    # middwares:
    
    # default handlers:
    dp.message.register(send_welcome, F.text == '/start')                           # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    dp.message.register(send_welcome, F.text == 'Main menu')                        # ^ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    
    dp.message.register(reply_for_now, F.text == 'Weather now')                     # –¥–µ—Ñ–æ–ª—Ç –∫–Ω–æ–ø–∫–∞
    dp.message.register(return_weather_now, F.location, StepsForm_one.get_loc)      # "StepsForm_one.get_loc_1" - –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "get_loc_1" –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ "async def reply_for_now"

    dp.message.register(reply_for_five_days, F.text == 'Weather for five days')     # –¥–µ—Ñ–æ–ª—Ç –∫–Ω–æ–ø–∫–∞
    dp.message.register(return_for_five_days, F.location, StepsForm_two.get_loc)    # "StepsForm_one.get_loc_2" - –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "get_loc_2" –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç—Å—è –≤ —Ö—ç–Ω–¥–ª–µ—Ä–µ "async def reply_for_five_days"

    dp.message.register(show_my_loc, F.text == 'My locations')                      # –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é - —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ª–æ–∫–∞—Ü–∏–π
    dp.callback_query.register(reply_loc_inline_butt, LocInline.filter())           # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    dp.callback_query.register(get_weather_from_inl, F.data.contains('wn'))         # –µ—Å–ª–∏ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ - –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ callback_data –µ—Å—Ç—å 'wn' - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é "func_name"
    dp.callback_query.register(get_weather_from_inl, F.data.contains('w5'))         # ^ —Ç–æ–∂–µ —Å–∞–º–æ–µ
    dp.callback_query.register(delete_location_1, F.data.contains('dl_1'))          # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    dp.callback_query.register(delete_location_2, F.data.contains('dl_2'))          # —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    dp.callback_query.register(no_delete_location, F.data.contains('dl_no'))        # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª —É–¥–∞–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é

    dp.message.register(reply_save_location, F.text == 'Add new location')          # –∑–∞–ø—É—Å–∫ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    dp.message.register(reply_get_loc_name, F.location, StepsForm_three.get_loc)    # –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.register(save_loc_in_db, F.text, StepsForm_three.get_loc_name)       # –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    

    dp.message.register(echo, F.text)                                               # –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ "ü§∑üèΩ‚Äç‚ôÄÔ∏è"


    # bot start:
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(Main())